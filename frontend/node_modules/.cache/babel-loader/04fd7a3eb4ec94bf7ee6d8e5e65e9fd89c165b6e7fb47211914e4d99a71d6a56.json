{"ast":null,"code":"var Validator = require('./validator.js');\nvar Constraint = require('./constraints.js').Constraint;\nvar common = require('./common.js');\n\n//\n// Enum Validator\n//\n\nvar EnumValidator = module.exports = function (context, items) {\n  this.items = items || [];\n  Validator.call(this, context, 'enum');\n  this.addCheck(function (value, options, path) {\n    var errors = [];\n    var valid = false;\n    this.items.forEach(function (item) {\n      if (!valid) {\n        if (common.isObject(item) || common.isArray(item)) {\n          valid = JSON.stringify(item) === JSON.stringify(value);\n        } else {\n          valid = item === value;\n        }\n      }\n    });\n    if (!valid) {\n      this.addError(errors, 'Not a valid enumeration item: ' + value, 'enum', path);\n    }\n    return errors;\n  });\n};\ncommon.extend(EnumValidator.prototype, Validator.prototype);\nEnumValidator.prototype.toJSON = function () {\n  return Validator.prototype.toJSON.call(this, {\n    'enum': this.items\n  });\n};\nEnumValidator.prototype.fromJSON = function (schema) {\n  this.items = schema.enum;\n  return Validator.prototype.fromJSON.call(this, schema);\n};","map":{"version":3,"names":["Validator","require","Constraint","common","EnumValidator","module","exports","context","items","call","addCheck","value","options","path","errors","valid","forEach","item","isObject","isArray","JSON","stringify","addError","extend","prototype","toJSON","fromJSON","schema","enum"],"sources":["C:/game/mern/node_modules/jski/lib/enum.js"],"sourcesContent":["var Validator = require('./validator.js');\nvar Constraint = require('./constraints.js').Constraint;\nvar common = require('./common.js');\n\n//\n// Enum Validator\n//\n\nvar EnumValidator = module.exports = function(context, items) {\n\n  this.items = items || [];\n  Validator.call(this, context, 'enum');\n\n  this.addCheck(function(value, options, path) {\n    var errors = [];\n    var valid = false;\n\n    this.items.forEach(function(item) {\n      if (!valid) {\n        if (common.isObject(item) || common.isArray(item)) {\n          valid = JSON.stringify(item) === JSON.stringify(value);\n        }\n        else {\n          valid = item === value;\n        }\n      }\n    });\n\n    if (!valid) {\n      this.addError(errors, 'Not a valid enumeration item: ' + value, 'enum', path);\n    }\n    return errors;\n  });\n};\n\n\ncommon.extend(EnumValidator.prototype, Validator.prototype);\n\n\nEnumValidator.prototype.toJSON = function() {\n  return Validator.prototype.toJSON.call(this, { 'enum': this.items });\n};\n\n\nEnumValidator.prototype.fromJSON = function(schema) {\n  this.items = schema.enum;\n  return Validator.prototype.fromJSON.call(this, schema);\n};\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACzC,IAAIC,UAAU,GAAGD,OAAO,CAAC,kBAAkB,CAAC,CAACC,UAAU;AACvD,IAAIC,MAAM,GAAGF,OAAO,CAAC,aAAa,CAAC;;AAEnC;AACA;AACA;;AAEA,IAAIG,aAAa,GAAGC,MAAM,CAACC,OAAO,GAAG,UAASC,OAAO,EAAEC,KAAK,EAAE;EAE5D,IAAI,CAACA,KAAK,GAAGA,KAAK,IAAI,EAAE;EACxBR,SAAS,CAACS,IAAI,CAAC,IAAI,EAAEF,OAAO,EAAE,MAAM,CAAC;EAErC,IAAI,CAACG,QAAQ,CAAC,UAASC,KAAK,EAAEC,OAAO,EAAEC,IAAI,EAAE;IAC3C,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIC,KAAK,GAAG,KAAK;IAEjB,IAAI,CAACP,KAAK,CAACQ,OAAO,CAAC,UAASC,IAAI,EAAE;MAChC,IAAI,CAACF,KAAK,EAAE;QACV,IAAIZ,MAAM,CAACe,QAAQ,CAACD,IAAI,CAAC,IAAId,MAAM,CAACgB,OAAO,CAACF,IAAI,CAAC,EAAE;UACjDF,KAAK,GAAGK,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,KAAKG,IAAI,CAACC,SAAS,CAACV,KAAK,CAAC;QACxD,CAAC,MACI;UACHI,KAAK,GAAGE,IAAI,KAAKN,KAAK;QACxB;MACF;IACF,CAAC,CAAC;IAEF,IAAI,CAACI,KAAK,EAAE;MACV,IAAI,CAACO,QAAQ,CAACR,MAAM,EAAE,gCAAgC,GAAGH,KAAK,EAAE,MAAM,EAAEE,IAAI,CAAC;IAC/E;IACA,OAAOC,MAAM;EACf,CAAC,CAAC;AACJ,CAAC;AAGDX,MAAM,CAACoB,MAAM,CAACnB,aAAa,CAACoB,SAAS,EAAExB,SAAS,CAACwB,SAAS,CAAC;AAG3DpB,aAAa,CAACoB,SAAS,CAACC,MAAM,GAAG,YAAW;EAC1C,OAAOzB,SAAS,CAACwB,SAAS,CAACC,MAAM,CAAChB,IAAI,CAAC,IAAI,EAAE;IAAE,MAAM,EAAE,IAAI,CAACD;EAAM,CAAC,CAAC;AACtE,CAAC;AAGDJ,aAAa,CAACoB,SAAS,CAACE,QAAQ,GAAG,UAASC,MAAM,EAAE;EAClD,IAAI,CAACnB,KAAK,GAAGmB,MAAM,CAACC,IAAI;EACxB,OAAO5B,SAAS,CAACwB,SAAS,CAACE,QAAQ,CAACjB,IAAI,CAAC,IAAI,EAAEkB,MAAM,CAAC;AACxD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}