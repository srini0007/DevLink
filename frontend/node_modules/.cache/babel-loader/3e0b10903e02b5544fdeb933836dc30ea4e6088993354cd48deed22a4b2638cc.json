{"ast":null,"code":"var Validator = require('./validator.js');\nvar common = require('./common.js');\n\n//\n// Ref Validator\n//\n\nvar RefValidator = module.exports = function (context, args) {\n  this.ref = args ? args[0] : '';\n  Validator.call(this, context, '$ref');\n  this.addCheck(function (value, options, path) {\n    var errors = [];\n    if (options.omitRefs) return errors;\n    if (options && options.definitions && options.definitions[this.ref]) {\n      this.addErrors(errors, options.definitions[this.ref].validate(value, options, path));\n    } else {\n      this.addError(errors, '$ref', 'Definition of schema reference not found: ' + value, path);\n    }\n    return errors;\n  });\n};\ncommon.extend(RefValidator.prototype, Validator.prototype);\nRefValidator.prototype.toJSON = function () {\n  return Validator.prototype.toJSON.call(this, {\n    $ref: this.ref\n  });\n};\nRefValidator.prototype.fromJSON = function (schema) {\n  this.ref = schema.$ref;\n  return Validator.prototype.fromJSON.call(this, schema);\n};","map":{"version":3,"names":["Validator","require","common","RefValidator","module","exports","context","args","ref","call","addCheck","value","options","path","errors","omitRefs","definitions","addErrors","validate","addError","extend","prototype","toJSON","$ref","fromJSON","schema"],"sources":["C:/game/mern/node_modules/jski/lib/ref.js"],"sourcesContent":["var Validator = require('./validator.js');\nvar common = require('./common.js');\n\n//\n// Ref Validator\n//\n\nvar RefValidator = module.exports = function(context, args) {\n\n  this.ref = args ? args[0] : '';\n  Validator.call(this, context, '$ref');\n\n  this.addCheck(function(value, options, path) {\n    var errors = [];\n\n    if (options.omitRefs) return errors;\n\n    if (options && options.definitions && options.definitions[this.ref]) {\n      this.addErrors(errors, options.definitions[this.ref].validate(value, options, path));\n    }\n    else {\n      this.addError(errors, '$ref', 'Definition of schema reference not found: ' + value, path);\n    }\n    return errors;\n  });\n};\n\ncommon.extend(RefValidator.prototype, Validator.prototype);\n\n\nRefValidator.prototype.toJSON = function() {\n  return Validator.prototype.toJSON.call(this, { $ref: this.ref });\n};\n\n\nRefValidator.prototype.fromJSON = function(schema) {\n  this.ref = schema.$ref;\n  return Validator.prototype.fromJSON.call(this, schema);\n};\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACzC,IAAIC,MAAM,GAAGD,OAAO,CAAC,aAAa,CAAC;;AAEnC;AACA;AACA;;AAEA,IAAIE,YAAY,GAAGC,MAAM,CAACC,OAAO,GAAG,UAASC,OAAO,EAAEC,IAAI,EAAE;EAE1D,IAAI,CAACC,GAAG,GAAGD,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE;EAC9BP,SAAS,CAACS,IAAI,CAAC,IAAI,EAAEH,OAAO,EAAE,MAAM,CAAC;EAErC,IAAI,CAACI,QAAQ,CAAC,UAASC,KAAK,EAAEC,OAAO,EAAEC,IAAI,EAAE;IAC3C,IAAIC,MAAM,GAAG,EAAE;IAEf,IAAIF,OAAO,CAACG,QAAQ,EAAE,OAAOD,MAAM;IAEnC,IAAIF,OAAO,IAAIA,OAAO,CAACI,WAAW,IAAIJ,OAAO,CAACI,WAAW,CAAC,IAAI,CAACR,GAAG,CAAC,EAAE;MACnE,IAAI,CAACS,SAAS,CAACH,MAAM,EAAEF,OAAO,CAACI,WAAW,CAAC,IAAI,CAACR,GAAG,CAAC,CAACU,QAAQ,CAACP,KAAK,EAAEC,OAAO,EAAEC,IAAI,CAAC,CAAC;IACtF,CAAC,MACI;MACH,IAAI,CAACM,QAAQ,CAACL,MAAM,EAAE,MAAM,EAAE,4CAA4C,GAAGH,KAAK,EAAEE,IAAI,CAAC;IAC3F;IACA,OAAOC,MAAM;EACf,CAAC,CAAC;AACJ,CAAC;AAEDZ,MAAM,CAACkB,MAAM,CAACjB,YAAY,CAACkB,SAAS,EAAErB,SAAS,CAACqB,SAAS,CAAC;AAG1DlB,YAAY,CAACkB,SAAS,CAACC,MAAM,GAAG,YAAW;EACzC,OAAOtB,SAAS,CAACqB,SAAS,CAACC,MAAM,CAACb,IAAI,CAAC,IAAI,EAAE;IAAEc,IAAI,EAAE,IAAI,CAACf;EAAI,CAAC,CAAC;AAClE,CAAC;AAGDL,YAAY,CAACkB,SAAS,CAACG,QAAQ,GAAG,UAASC,MAAM,EAAE;EACjD,IAAI,CAACjB,GAAG,GAAGiB,MAAM,CAACF,IAAI;EACtB,OAAOvB,SAAS,CAACqB,SAAS,CAACG,QAAQ,CAACf,IAAI,CAAC,IAAI,EAAEgB,MAAM,CAAC;AACxD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}