{"ast":null,"code":"var common = require('./common.js');\n\n//\n// Constraint\n//\n\nfunction Constraint(name, validate, toJSON, fromJSON) {\n  this.name = name;\n  this.enabled = false;\n  this._value = null;\n  this._validator = null;\n  this._validate = validate;\n  this._toJSON = toJSON;\n  this._fromJSON = fromJSON;\n}\n;\nConstraint.prototype.decorate = function (validator) {\n  var self = this;\n  this._validator = validator;\n\n  // add a setter for the contraint on the validator\n  validator[this.name] = function (value) {\n    self._value = value;\n    self.enabled = true;\n    return validator;\n  };\n};\nConstraint.prototype.validate = function (value, options, path) {\n  path = path || '';\n  if (this._validate) {\n    return this._validate.call(this._validator, value, this._value, options, path);\n  }\n  return true;\n};\nConstraint.prototype.toJSON = function () {\n  return this._toJSON ? this._toJSON.call(this._validator, this._value) : this._value;\n};\nConstraint.prototype.fromJSON = function (value) {\n  this._value = this._fromJSON ? this._fromJSON.call(this._validator, value) : value;\n  this.enabled = true;\n};\n\n//\n// Variable argument/values constraint\n//\n\nfunction VarArgsConstraint(name, values, validate, toJSON, fromJSON) {\n  Constraint.call(this, name, values, validate, toJSON, fromJSON);\n}\n;\ncommon.extend(VarArgsConstraint.prototype, Constraint.prototype);\nVarArgsConstraint.prototype.decorate = function (validator) {\n  var self = this;\n  this._validator = validator;\n  validator[this.name] = function (varargs) {\n    self._value = common.cloneArgs(arguments);\n    self.enabled = true;\n    return validator;\n  };\n};\n\n//\n// exports\n//\n\nmodule.exports = {\n  Constraint: Constraint,\n  VarArgsConstraint: VarArgsConstraint\n};","map":{"version":3,"names":["common","require","Constraint","name","validate","toJSON","fromJSON","enabled","_value","_validator","_validate","_toJSON","_fromJSON","prototype","decorate","validator","self","value","options","path","call","VarArgsConstraint","values","extend","varargs","cloneArgs","arguments","module","exports"],"sources":["C:/game/mern/node_modules/jski/lib/constraints.js"],"sourcesContent":["var common = require('./common.js');\n\n//\n// Constraint\n//\n\nfunction Constraint(name, validate, toJSON, fromJSON) {\n\n  this.name = name;\n  this.enabled = false;\n\n  this._value = null;\n  this._validator = null;\n\n  this._validate = validate;\n  this._toJSON = toJSON;\n  this._fromJSON = fromJSON;\n};\n\n\nConstraint.prototype.decorate = function(validator) {\n\n  var self = this;\n\n  this._validator = validator;\n\n  // add a setter for the contraint on the validator\n  validator[this.name] = function(value) {\n    self._value = value;\n    self.enabled = true;\n    return validator;\n  };\n};\n\n\nConstraint.prototype.validate = function(value, options, path) {\n\n  path = path || '';\n  if (this._validate) {\n    return this._validate.call(this._validator, value, this._value, options, path);\n  }\n  return true;\n};\n\n\nConstraint.prototype.toJSON = function() {\n\n  return this._toJSON ?\n    this._toJSON.call(this._validator, this._value) :\n    this._value;\n};\n\n\nConstraint.prototype.fromJSON = function(value) {\n\n  this._value = this._fromJSON ? this._fromJSON.call(this._validator, value) : value;\n  this.enabled = true;\n};\n\n\n//\n// Variable argument/values constraint\n//\n\nfunction VarArgsConstraint(name, values, validate, toJSON, fromJSON) {\n\n  Constraint.call(this, name, values, validate, toJSON, fromJSON);\n};\n\ncommon.extend(VarArgsConstraint.prototype, Constraint.prototype);\n\n\nVarArgsConstraint.prototype.decorate = function(validator) {\n\n  var self = this;\n\n  this._validator = validator;\n\n  validator[this.name] = function(varargs) {\n    self._value = common.cloneArgs(arguments);\n    self.enabled = true;\n    return validator;\n  };\n};\n\n\n//\n// exports\n//\n\nmodule.exports = {\n  Constraint: Constraint,\n  VarArgsConstraint: VarArgsConstraint\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}